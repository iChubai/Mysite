{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to HouJiadong's Site! \ud83c\udf89  <p>  My frineds! /  About Me /   Academic Page /  Statistics </p> <li>Website Operating Time: </li> <li>Total Visitors:  people</li> <li>Total Visits:  times</li>"},{"location":"academy/","title":"Jiadong Hou(\u4faf\u5609\u680b)","text":""},{"location":"academy/#jiadong-hou","title":"Jiadong Hou(\u4faf\u5609\u680b)","text":"<p> Work Email: 2311671 [at] mail [at] nankai [dot] edu [dot] cn</p> <p> Personal Email: 2506676943 [at] qq [dot] com</p> <p> CV: Click Here</p> <p> </p>"},{"location":"academy/#bio","title":"Bio","text":"<p>I am a second-year undergraduate student majoring in Computer Science at  Nankai University (NKU). Currently, I am an intern at Hvision, under the guidance of Prof. Qibin Hou.</p>"},{"location":"academy/#research-interest","title":"Research Interest","text":"<ul> <li>Computer Vision: I am committed to the CV field, especially in the field of visual object tracking and kownledge distillation.</li> </ul>"},{"location":"academy/#education","title":"Education","text":""},{"location":"academy/#college-of-computer-science-nankai-university","title":"College of Computer Science, Nankai University","text":"<p>Sept. 2023 -- Present</p>"},{"location":"academy/#publications-manuscripts","title":"Publications &amp; Manuscripts","text":"<p>Coming soon...</p>"},{"location":"academy/#experience","title":"Experience","text":"<p>VCIP</p> <p>Dec. 2024 - Present</p> <p>Research Intern</p>"},{"location":"academy/#projects","title":"Projects","text":"<p>Coming soon...</p>"},{"location":"academy/#media-exposures","title":"Media Exposures","text":"<p>I write articles and share my thinkings on Zhihu regularly and have 200+ followers so far!</p>"},{"location":"academy/#honors","title":"Honors","text":"<ul> <li>Scholarship of Public Interests and All-Round Capability, 2024 </li> <li>Second Prize of the National College Students Mathematical Modeling Contest (Tianjin Division)</li> <li>First prize of the 16<sup>th</sup> Chinese Mathematics Competitions and first prize of the  Tianjin Mathematics Competitions(2024)</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About \ud83e\udd73","text":"<p> \u7ea6 70 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f  \u5171\u88ab\u8bfb\u8fc7  \u6b21</p> \u4e2d\u6587English <p>\u6211\u662f\u5357\u5f00\u5927\u5b66\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\u7684\u5927\u4e8c\u672c\u79d1\u751f\uff0c\u76ee\u524d\u611f\u5174\u8da3\u7684\u65b9\u5411\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\uff08CV\uff09\u3002\u591a\u591a\u6307\u6559~    </p> <p>I am a sophomore in Nankai University majoring in Computer Science and Technology. My interests are in computer vision (CV). Thank you for your guidance!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/#blog","title":"Blog","text":"<p> \u7ea6 1 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f  \u5171\u88ab\u8bfb\u8fc7  \u6b21</p>"},{"location":"blogs/","title":"index","text":""},{"location":"blogs/#blogs","title":"Blogs \u270d","text":"<p>Abstract</p> <p>\u4e2a\u4eba\u535a\u5ba2\uff0c\u4e3b\u8981\u8bb0\u5f55</p> <ul> <li>\u5728\u8ba1\u7b97\u673a\u3001\u4eba\u5de5\u667a\u80fd\u3001\u6570\u5b66\u76f8\u5173\u65b9\u9762\u7684\u5b66\u4e60\uff0c\u4e5f\u4f1a\u63ba\u6742\u4e00\u4e9b\u5176\u5b83\u7684\u9886\u57df\uff1b</li> <li>\u8bfb\u4e66\u6458\u5f55\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u7b14\u8bb0\uff1b</li> <li>\u4e00\u4e9b\u6742\u8c08\u3002</li> </ul> <p>\u4e00\u4e9b\u6bd4\u8f83\u6210\u4f53\u7cfb\u7684\u7b14\u8bb0\u4f1a\u8bb0\u5f55\u5728 Notes \u4e2d\u3002</p> <p>\u672c\u90e8\u5206\u5185\u5bb9\uff08\u9664\u7279\u522b\u58f0\u660e\u5916\uff09\u91c7\u7528 \u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u4fdd\u6301\u4e00\u81f4 4.0 \u56fd\u9645 (CC BY-NC-SA 4.0) \u8bb8\u53ef\u534f\u8bae\u8fdb\u884c\u8bb8\u53ef\u3002</p>"},{"location":"blogs/#archives","title":"Archives","text":"<p>\u5982\u679c\u5bfb\u627e\u4e0d\u65b9\u4fbf\u7684\u8bdd\uff0c\u4e0d\u59a8\u8bd5\u8bd5\u641c\u7d22\u6216\u8005\u524d\u5f80 Tags \u9875\u9762</p> <p>{{ blog_content }}</p>"},{"location":"links/","title":"Links","text":""},{"location":"links/#links","title":"Links \ud83e\udd70","text":"<p>Abstract</p> <p>My friends!</p> Kinnariya Mama Tanha's Blogs \u5927\u4f6c(\u5d07\u62dc\u8138qwq) <p>\u5728\u4e0b\u65b9\u7559\u8a00\u7533\u8bf7\u52a0\u5165\u6211\u7684\u53cb\u94fe\uff0c\u6309\u5982\u4e0b\u683c\u5f0f\u63d0\u4f9b\u4fe1\u606f\uff1a</p> <ul><li>\u540d\u79f0\uff1aKinnari's Site</li><li>\u7b80\u4ecb\uff1aKinnariya Mama Tanha</li><li>\u94fe\u63a5\uff1ahttps://kinnariyamamatanha.github.io/</li><li>\u56fe\u7247\uff1aLink of your avatar</li></ul>"},{"location":"notes/","title":"index","text":""},{"location":"notes/#notes","title":"Notes \ud83d\udcda","text":"<p>Abstract</p> <p>\u4e00\u4e9b\u6bd4\u8f83\u6210\u4f53\u7cfb\u7684\u7b14\u8bb0\u90fd\u505a\u5728\u8fd9\u91cc\uff0c\u65b9\u4fbf\u67e5\u9605\u3002</p> <p>\u672c\u90e8\u5206\u5185\u5bb9\uff08\u9664\u7279\u522b\u58f0\u660e\u5916\uff09\u91c7\u7528 \u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u4fdd\u6301\u4e00\u81f4 4.0 \u56fd\u9645 (CC BY-NC-SA 4.0) \u8bb8\u53ef\u534f\u8bae\u8fdb\u884c\u8bb8\u53ef\u3002</p>"},{"location":"notes/UCB-CS61c/1-intro/","title":"Intro","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/1-intro/#intro","title":"Intro","text":"<p> \u7ea6 154 \u4e2a\u5b57  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f  \u5171\u88ab\u8bfb\u8fc7  \u6b21</p> <p>title: Intro math: false tags:   - CS61C</p>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/1-intro/#great-ideas","title":"Great Ideas","text":"<ol> <li>Abstraction: Levels of Representation / Interpretation </li> <li>Moore's Law: Designing through trends</li> <li>Principle of Locality: Memory Hierarchy</li> <li>Parallelism &amp; Amdahl's law</li> <li>Dependability via Redundancy</li> </ol>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/1-intro/#number-representations","title":"Number Representations","text":"<ul> <li>Bit: 0/1</li> <li>Byte: 8 bits</li> <li>Most Significant Bit (MSB)</li> <li>Least Significant Bit (LSB)</li> <li>One's Complement: <code>-x=~x</code><ul> <li>Neg: \\([-(2^{n-1}-1),-0]\\)</li> <li>Pos: \\([0, 2^{n-1}-1]\\)</li> </ul> </li> <li>Two's Complement: <code>-x=~x+1</code><ul> <li>Neg: \\([-2^{n-1},-1]\\)</li> <li>Pos: \\([0, 2^{n-1}-1]\\)</li> </ul> </li> <li>Bias encoding: \u4f8b\u5982\u60f3\u8981\u5229\u7528 4 \u4f4d bits \u4ee3\u8868 \\([-3,12]\\)\uff0c\u53ea\u9700\u53d6 bias \u4e3a \\(-3\\)\uff0c\u5229\u7528 \\([0,15]\\) \u6765\u8868\u793a<ul> <li>\u5bf9 two's complement\uff0cbias \u4e3a \\(N=-2^{n-1}+1\\)\uff0c\u4e0d\u8fc7 \\(-2^{n-1} - N=-1\\)\uff0c\u800c\u4e0d\u662f \\(0\\) </li> <li>\u8fd9\u662f\u56e0\u4e3a\u5728 floating representations \u4e2d\uff0c\u5168\u4e3a \\(1\\) \u7684\u6570\u6709\u7279\u6b8a\u7528\u9014</li> <li>\u4f8b\u5982\uff1a <code>0b1010</code> \u7684 bias \u4e3a \\(-2^{4-1}+1=-7\\), \u8fd9\u4e2a\u6570\u4e3a \\(10-(-7)=3\\)</li> </ul> </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/","title":"C pointers","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#cs61c-lecture-notes-introduction-to-c-pointers","title":"\ud83d\udcda CS61C Lecture Notes: Introduction to C &amp; Pointers","text":"<p> \u7ea6 282 \u4e2a\u5b57  34 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f  \u5171\u88ab\u8bfb\u8fc7  \u6b21</p> <p>Instructor: Stephan Kaminsky | Date: Jun 2019  </p>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#key-concepts-in-c-programming","title":"\ud83d\udccc Key Concepts in C Programming","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#1-compilation-in-c","title":"1. Compilation in C","text":"<ul> <li>Compiled Language: Converts C code directly to machine-specific instructions (0s and 1s).  </li> <li>\ud83d\ude80 Advantages: Faster execution than Java/Python (no bytecode/JVM).  </li> <li>\u26a0\ufe0f Disadvantages: Platform-dependent executables; slower edit-compile-run cycle.  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#2-variable-types-declarations","title":"2. Variable Types &amp; Declarations","text":"<ul> <li>Typed Variables: Must declare type before use.  </li> <li>Example: C<pre><code>int x = 5;          // Integer\nfloat y = 1.618;    // Floating point\nchar z = 'A';       // Character\n</code></pre></li> <li>Type Sizes: Machine-dependent (e.g., <code>int</code> = 4/8 bytes).  </li> <li>Special Keywords: <code>short</code>, <code>long</code>, <code>unsigned</code>.  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#3-characters-ascii","title":"3. Characters &amp; ASCII","text":"<ul> <li>ASCII Encoding: Characters stored as numbers (e.g., <code>'a'</code> = 97). C<pre><code>char c = 'a';     // Same as char c = 97;\n</code></pre></li> <li>Size: 1 byte (8 bits).  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#4-type-casting","title":"4. Type Casting","text":"<ul> <li>Weak Typing: Explicitly cast between types.  </li> <li>Example: C<pre><code>int i = -1;\nif ((unsigned int)i &lt; 0) { ... }  // False\n</code></pre></li> <li>\u26a0\ufe0f Caution: Risky casts (e.g., casting structs to integers).  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#5-functions","title":"5. Functions","text":"<ul> <li>Prototypes &amp; Definitions: C<pre><code>int add(int a, int b);   // Prototype\nint add(int a, int b) { return a + b; }  // Definition\n</code></pre></li> <li>Return Types: Must declare return type (<code>void</code> for no return).  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#6-structs-unions","title":"6. Structs &amp; Unions","text":"<ul> <li>Structs: Group related variables. C<pre><code>typedef struct {\n  int length;\n  int year;\n} Song;\nSong s = {213, 1994}; \n</code></pre></li> <li>Unions: Overlapping memory for different types. C<pre><code>union Data {\n  int i;\n  float f;\n};\n</code></pre></li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#example-struct-padding","title":"\ud83e\uddee Example: Struct Padding","text":"C<pre><code>struct foo {\n  int a;     // 4 bytes\n  char b;    // 1 byte (+3 padding)\n  struct foo* c;  // 4 bytes\n};  \n// Total size = 12 bytes (32-bit architecture)\n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#c-vs-java-comparison","title":"\ud83d\udcca C vs Java Comparison","text":"Feature C Java Language Type Function-Oriented Object-Oriented Memory Management Manual (<code>malloc</code>, <code>free</code>) Automatic (Garbage Collection) Hello World <code>printf(\"Hello\\n\");</code> <code>System.out.println(...);</code>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#pointers-address-vs-value","title":"\ud83c\udfaf Pointers: Address vs Value","text":"<ul> <li>Pointer Syntax: C<pre><code>int y = 5;\nint *p = &amp;y;   // p stores address of y\nint z = *p;    // z = value at address p (5)\n</code></pre></li> <li>Pointer Types:  </li> <li><code>int*</code>, <code>char*</code>, <code>void*</code> (generic pointer).  </li> <li>\u26a0\ufe0f Dangling Pointers: Uninitialized pointers \u2192 undefined behavior!  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#example-pointer-parameter-passing","title":"\ud83d\udd0d Example: Pointer Parameter Passing","text":"C<pre><code>void addOne(int *p) { (*p)++; }  \nint main() {\n  int y = 3;\n  addOne(&amp;y);    // y becomes 4\n  return 0;\n}\n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#quiz-4-bit-number-representations","title":"\u2753 Quiz: 4-Bit Number Representations","text":"<p>Given <code>x = 0b1010</code> (4 bits), which value does NOT represent <code>x</code>?  </p> <p>Options: (A) -4 \u2003(B) -6\u2003(C) 10\u2003(D) -2  </p> <p>Analysis: - Unsigned: \\(2^3 + 2^1 = 10\\) \u2714\ufe0f (C) - Sign &amp; Magnitude: \\(-2^1 = -2\\) \u2714\ufe0f (D) - Biased (Bias=7): \\(10 - 7 = 3\\) \u2192 Not an option. - Two\u2019s Complement: \\(-6\\) \u2714\ufe0f (B) - One\u2019s Complement: \\(-5\\) \u2192 Not an option.  </p> <p>Answer: (A) -4 \u274c  </p>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#common-pointer-bugs","title":"\ud83d\uded1 Common Pointer Bugs","text":"<ul> <li>Uninitialized Pointers: C<pre><code>int *p;     // p points to garbage!\n*p = 5;     // Crash/undefined behavior\n</code></pre></li> <li>Memory Leaks: Forgetting to <code>free()</code> after <code>malloc()</code>.  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20pointers/#key-takeaways","title":"\ud83d\udcd6 Key Takeaways","text":"<ul> <li>C offers low-level control but requires careful memory management.  </li> <li>Pointers = powerful but error-prone. Always initialize!  </li> <li>Structs/unions organize data; padding affects memory layout.  </li> </ul> <p>\ud83d\udd17 Resources: - K&amp;R Book (\"The C Programming Language\") - C99 Standard </p>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/","title":"C strings","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#great-ideas-in-computer-architecture-c-arrays-strings-pointers","title":"\ud83d\udda5\ufe0f Great Ideas in Computer Architecture: C Arrays, Strings, &amp; Pointers","text":"<p> \u7ea6 312 \u4e2a\u5b57  45 \u884c\u4ee3\u7801  1 \u5f20\u56fe\u7247  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f  \u5171\u88ab\u8bfb\u8fc7  \u6b21</p> <p>Instructor: Jenny Song CS61C su20 - Lecture 3 | 6/26/2020 </p>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#review-of-last-lecture","title":"\ud83d\udcda Review of Last Lecture","text":"<ul> <li>C Basics </li> <li>Variables, Functions, Control Flow, Syntax.  </li> <li>Only <code>0</code> and <code>NULL</code> evaluate to <code>FALSE</code>.  </li> <li>Pointers </li> <li>Hold memory addresses (address vs. value).  </li> <li>Enable efficient code but are error-prone.  </li> <li>Pass by Value </li> <li>C functions pass arguments by value; pointers circumvent this.  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#struct-clarification","title":"\ud83c\udfd7\ufe0f Struct Clarification","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#struct-definition","title":"Struct Definition","text":"C<pre><code>struct foo { /* fields */ };  \nstruct foo name1;         // Declare variable of type struct foo  \nstruct foo* name2;        // Pointer to struct foo  \n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#typedef-with-struct","title":"Typedef with Struct","text":"C<pre><code>// Method 1  \nstruct foo { /* fields */ };  \ntypedef struct foo bar;  \nbar name1;  \n\n// Method 2 (combine definition and typedef)  \ntypedef struct foo { /* fields */ } bar;  \nbar name1;  \n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#great-idea-1-levels-of-representationinterpretation","title":"\ud83c\udf1f Great Idea #1: Levels of Representation/Interpretation","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#agenda","title":"\ud83d\udcdc Agenda","text":"<ol> <li>C Operators  </li> <li>Arrays  </li> <li>Strings  </li> <li>More Pointers (Arithmetic, Misc)  </li> </ol>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#c-operators","title":"\ud83d\udd22 C Operators","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#operator-precedence-table","title":"Operator Precedence Table","text":"Precedence Operator Description Associativity 1 <code>++</code>, <code>--</code> (post) Postfix increment/decrement Left-to-right 1 <code>()</code> Function call 1 <code>[]</code> Array subscripting 2 <code>++</code>, <code>--</code> (pre) Prefix increment/decrement Right-to-left 2 <code>*</code>, <code>&amp;</code> Dereference, Address-of","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#common-pitfalls","title":"Common Pitfalls","text":"<ul> <li>Assignment vs. Equality C<pre><code>a = b;   // Assignment  \na == b;  // Equality test  \n</code></pre></li> <li>Operator Binding </li> <li><code>-x &amp; 1 == 0</code> \u2192 <code>x &amp; (1 == 0)</code> (not <code>(x &amp; 1) == 0</code>).  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#arrays","title":"\ud83d\udce6 Arrays","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#basics","title":"Basics","text":"C<pre><code>int ar;              // Declare 2-element array  \nint ar[] = {795, 635};  // Declare and initialize  \n</code></pre> - Pitfalls: No bounds checking! Accessing <code>ar[n]</code> where <code>n &gt;= 2</code> causes undefined behavior.","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#arrays-vs-pointers","title":"Arrays vs. Pointers","text":"<ul> <li>Similarities: C<pre><code>char* buffer;  // Pointer  \nchar buffer[]; // Array (read-only pointer)  \n</code></pre></li> <li>Differences:  </li> <li><code>sizeof(ar)</code> returns array size; <code>sizeof(ptr)</code> returns pointer size.  </li> <li>Arrays cannot be reassigned (<code>ar = new_array</code> is invalid).  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#example-zeroing-an-array","title":"Example: Zeroing an Array","text":"C<pre><code>// Method 1: Array notation  \nfor (i = 0; i &lt; SIZE; i++) ar[i] = 0;  \n\n// Method 2: Pointer arithmetic  \nfor (i = 0; i &lt; SIZE; i++) *(ar + i) = 0;  \n\n// Method 3: Pointer traversal  \nfor (int* p = ar; p &lt; ar + SIZE; p++) *p = 0;  \n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#strings-in-c","title":"\ud83d\udcdc Strings in C","text":"<ul> <li>Definition: Null-terminated char array. C<pre><code>char s[] = \"abc\";  // Equivalent to {'a', 'b', 'c', '\\0'}  \n</code></pre></li> <li>Common Functions (<code>#include &lt;string.h&gt;</code>):  </li> <li><code>strlen(s)</code>: Returns length (excluding <code>\\0</code>).  </li> <li><code>strcmp(s1, s2)</code>: Returns <code>0</code> if equal.  </li> <li><code>strcpy(dest, src)</code>: Copies <code>src</code> to <code>dest</code>.  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#example","title":"Example","text":"C<pre><code>char s1, s2;  \nstrcpy(s1, \"hi\");  \nstrcpy(s2, \"hi\");  \n</code></pre> - <code>strcmp(s1, s2) == 0</code> \u2192 <code>1</code> (true). - <code>s1 == s2</code> \u2192 <code>0</code> (compares addresses, not content).","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#pointers","title":"\ud83c\udfaf Pointers","text":"","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#pointer-arithmetic","title":"Pointer Arithmetic","text":"<ul> <li>Rules:  </li> <li><code>ptr + n</code> adds <code>n * sizeof(*ptr)</code> to the address.  </li> <li>Valid operations: <code>ptr \u00b1 int</code>, subtract pointers, compare pointers.  </li> <li>Example: C<pre><code>int A[] = {5, 10};  \nint* p = A;  \np++;  // Moves to A (address += sizeof(int))  \n</code></pre></li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#pointers-to-pointers","title":"Pointers to Pointers","text":"C<pre><code>void IncrementPtr(int** h) { *h = *h + 1; }  \nint A[] = {50, 60, 70};  \nint* q = A;  \nIncrementPtr(&amp;q);  // q now points to A  \n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#struct-alignment","title":"\ud83e\udde9 Struct Alignment","text":"<ul> <li>Rules:  </li> <li>Members aligned to their size (e.g., <code>int</code> aligned to 4 bytes).  </li> <li>Padding added to meet alignment requirements.  </li> </ul>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#example_1","title":"Example","text":"C<pre><code>struct hello {  \n  int a;     // 4 bytes  \n  char b;    // 1 byte (+3 padding)  \n  short c;   // 2 bytes  \n  char* d;   // 4 bytes  \n  char e;    // 1 byte (+3 padding)  \n};  \n// Total size: 4 + (1+3) + 2 + 4 + (1+3) = 16 bytes  \n</code></pre>","tags":["CS61C"]},{"location":"notes/UCB-CS61c/C%20strings/#common-pitfalls-tips","title":"\ud83d\udea8 Common Pitfalls &amp; Tips","text":"<ol> <li>Uninitialized Pointers: C<pre><code>int* ptr;  // Points to garbage! Always initialize.  \n</code></pre></li> <li>Array Decay: When passed to functions, arrays decay to pointers (losing size info).  </li> <li>Null Terminator: Forgot <code>\\0</code> in strings? <code>strlen</code> may read garbage!  </li> </ol> <p>\u2728 Key Takeaways: - Arrays and pointers are powerful but error-prone. - Always manage memory carefully and use <code>sizeof()</code> for portability. - Understand alignment to optimize struct layouts!  </p>","tags":["CS61C"]},{"location":"summary/","title":"index","text":""},{"location":"summary/#summaries","title":"Summaries \ud83d\uddd3\ufe0f","text":"\u300e \u0915\u093f\u0928\u094d\u0928\u0930\u093f\u092f \u092e\u092e \u0924\u0923\u094d\u0939\u093e \u300f"},{"location":"summary/2025/summary-1/","title":"2025 \u5468\u7ed3 1","text":"<p> \u7ea6 0 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4\u4e0d\u5230 1 \u5206\u949f  \u5171\u88ab\u8bfb\u8fc7  \u6b21</p>","tags":["summary"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<p>{{ tag_content }}</p>"}]}